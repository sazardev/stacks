import 'package:dartz/dartz.dart' show Either, Unit;
import '../entities/cost_tracking.dart';
import '../value_objects/user_id.dart';
import '../value_objects/time.dart';
import '../value_objects/money.dart';
import '../failures/failures.dart';

/// Repository interface for Cost Tracking operations
abstract class CostTrackingRepository {
  /// Creates a new cost entry
  Future<Either<Failure, Cost>> createCost(Cost cost);

  /// Gets a cost by its ID
  Future<Either<Failure, Cost>> getCostById(UserId costId);

  /// Updates an existing cost
  Future<Either<Failure, Cost>> updateCost(Cost cost);

  /// Deletes a cost entry
  Future<Either<Failure, Unit>> deleteCost(UserId costId);

  /// Gets costs by type
  Future<Either<Failure, List<Cost>>> getCostsByType(CostType type);

  /// Gets costs by category
  Future<Either<Failure, List<Cost>>> getCostsByCategory(CostCategory category);

  /// Gets costs by date range
  Future<Either<Failure, List<Cost>>> getCostsByDateRange(
    Time startDate,
    Time endDate,
  );

  /// Gets costs by cost center
  Future<Either<Failure, List<Cost>>> getCostsByCostCenter(UserId costCenterId);

  /// Gets costs related to a specific item
  Future<Either<Failure, List<Cost>>> getCostsByRelatedItem(UserId itemId);

  /// Gets recurring costs
  Future<Either<Failure, List<Cost>>> getRecurringCosts();

  /// Gets costs by amount range
  Future<Either<Failure, List<Cost>>> getCostsByAmountRange(
    Money minAmount,
    Money maxAmount,
  );

  /// Searches costs by description
  Future<Either<Failure, List<Cost>>> searchCostsByDescription(String query);

  /// Creates a new cost center
  Future<Either<Failure, CostCenter>> createCostCenter(CostCenter costCenter);

  /// Gets a cost center by its ID
  Future<Either<Failure, CostCenter>> getCostCenterById(UserId costCenterId);

  /// Updates an existing cost center
  Future<Either<Failure, CostCenter>> updateCostCenter(CostCenter costCenter);

  /// Deletes a cost center
  Future<Either<Failure, Unit>> deleteCostCenter(UserId costCenterId);

  /// Gets all cost centers
  Future<Either<Failure, List<CostCenter>>> getAllCostCenters();

  /// Gets active cost centers
  Future<Either<Failure, List<CostCenter>>> getActiveCostCenters();

  /// Gets cost centers managed by a specific user
  Future<Either<Failure, List<CostCenter>>> getCostCentersByManager(
    UserId managerId,
  );

  /// Gets cost centers with budget exceeded
  Future<Either<Failure, List<CostCenter>>> getCostCentersOverBudget();

  /// Creates a profitability report
  Future<Either<Failure, ProfitabilityReport>> createProfitabilityReport(
    ProfitabilityReport report,
  );

  /// Gets a profitability report by its ID
  Future<Either<Failure, ProfitabilityReport>> getProfitabilityReportById(
    UserId reportId,
  );

  /// Gets profitability reports by date range
  Future<Either<Failure, List<ProfitabilityReport>>>
  getProfitabilityReportsByDateRange(Time startDate, Time endDate);

  /// Gets profitability reports generated by a specific user
  Future<Either<Failure, List<ProfitabilityReport>>>
  getProfitabilityReportsByGenerator(UserId generatorId);

  /// Creates a recipe cost analysis
  Future<Either<Failure, RecipeCost>> createRecipeCost(RecipeCost recipeCost);

  /// Gets a recipe cost by its ID
  Future<Either<Failure, RecipeCost>> getRecipeCostById(UserId recipeCostId);

  /// Gets recipe costs by recipe ID
  Future<Either<Failure, List<RecipeCost>>> getRecipeCostsByRecipeId(
    UserId recipeId,
  );

  /// Gets current pricing for recipes
  Future<Either<Failure, List<RecipeCost>>> getCurrentRecipePricing();

  /// Updates recipe cost
  Future<Either<Failure, RecipeCost>> updateRecipeCost(RecipeCost recipeCost);

  /// Deletes a recipe cost analysis
  Future<Either<Failure, Unit>> deleteRecipeCost(UserId recipeCostId);

  /// Gets total costs for a period
  Future<Either<Failure, Money>> getTotalCostsForPeriod(
    Time startDate,
    Time endDate,
  );

  /// Gets cost breakdown by type for a period
  Future<Either<Failure, Map<CostType, Money>>> getCostBreakdownByType(
    Time startDate,
    Time endDate,
  );

  /// Gets cost breakdown by category for a period
  Future<Either<Failure, Map<CostCategory, Money>>> getCostBreakdownByCategory(
    Time startDate,
    Time endDate,
  );

  /// Gets top expensive items
  Future<Either<Failure, List<Cost>>> getTopExpensiveItems(int limit);

  /// Gets cost trends over time
  Future<Either<Failure, Map<Time, Money>>> getCostTrends(
    Time startDate,
    Time endDate,
    Duration interval,
  );

  /// Calculates variance between actual and budgeted costs
  Future<Either<Failure, Map<UserId, double>>> calculateBudgetVariance(
    UserId costCenterId,
    Time periodStart,
    Time periodEnd,
  );

  /// Gets cost efficiency metrics
  Future<Either<Failure, Map<String, double>>> getCostEfficiencyMetrics(
    Time startDate,
    Time endDate,
  );
}
