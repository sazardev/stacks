// Mocks generated by Mockito 5.4.6 from annotations
// in stacks/test/application/use_cases/create_order_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:stacks/application/config/kitchen_config.dart' as _i19;
import 'package:stacks/domain/entities/analytics.dart' as _i18;
import 'package:stacks/domain/entities/order.dart' as _i6;
import 'package:stacks/domain/entities/order_item.dart' as _i10;
import 'package:stacks/domain/entities/recipe.dart' as _i12;
import 'package:stacks/domain/entities/user.dart' as _i15;
import 'package:stacks/domain/failures/failures.dart' as _i5;
import 'package:stacks/domain/repositories/order_repository.dart' as _i3;
import 'package:stacks/domain/repositories/recipe_repository.dart' as _i11;
import 'package:stacks/domain/repositories/user_repository.dart' as _i14;
import 'package:stacks/domain/services/workflow_validation_service.dart'
    as _i17;
import 'package:stacks/domain/value_objects/money.dart' as _i13;
import 'package:stacks/domain/value_objects/order_status.dart' as _i8;
import 'package:stacks/domain/value_objects/priority.dart' as _i9;
import 'package:stacks/domain/value_objects/time.dart' as _i16;
import 'package:stacks/domain/value_objects/user_id.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i3.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> createOrder(
    _i6.Order? order,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createOrder, [order]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#createOrder, [order]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> getOrderById(
    _i7.UserId? orderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderById, [orderId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#getOrderById, [orderId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getAllOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getAllOrders, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getAllOrders, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersByStatus(
    _i8.OrderStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersByStatus, [status]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getOrdersByStatus, [status]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersByStation(
    _i7.UserId? stationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersByStation, [stationId]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getOrdersByStation, [stationId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersByCustomer(
    _i7.UserId? customerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersByCustomer, [customerId]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getOrdersByCustomer, [customerId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersByPriority(
    _i9.Priority? priority,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersByPriority, [priority]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getOrdersByPriority, [priority]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getPendingOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingOrders, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getPendingOrders, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getActiveOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveOrders, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getActiveOrders, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> updateOrder(
    _i6.Order? order,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateOrder, [order]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#updateOrder, [order]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> updateOrderStatus(
    _i7.UserId? orderId,
    _i8.OrderStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateOrderStatus, [orderId, status]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#updateOrderStatus, [orderId, status]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> updateOrderPriority(
    _i7.UserId? orderId,
    _i9.Priority? priority,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateOrderPriority, [orderId, priority]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#updateOrderPriority, [orderId, priority]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> assignOrderToStation(
    _i7.UserId? orderId,
    _i7.UserId? stationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#assignOrderToStation, [orderId, stationId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#assignOrderToStation, [orderId, stationId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> addItemToOrder(
    _i7.UserId? orderId,
    _i10.OrderItem? item,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addItemToOrder, [orderId, item]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#addItemToOrder, [orderId, item]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> removeItemFromOrder(
    _i7.UserId? orderId,
    _i7.UserId? itemId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeItemFromOrder, [orderId, itemId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#removeItemFromOrder, [orderId, itemId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> updateOrderItem(
    _i7.UserId? orderId,
    _i10.OrderItem? item,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateOrderItem, [orderId, item]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#updateOrderItem, [orderId, item]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Order>> cancelOrder(
    _i7.UserId? orderId,
    String? reason,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cancelOrder, [orderId, reason]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>.value(
              _FakeEither_0<_i5.Failure, _i6.Order>(
                this,
                Invocation.method(#cancelOrder, [orderId, reason]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Order>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteOrder(
    _i7.UserId? orderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteOrder, [orderId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#deleteOrder, [orderId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>> getOrdersInTimeRange(
    DateTime? startTime,
    DateTime? endTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersInTimeRange, [startTime, endTime]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Order>>(
                    this,
                    Invocation.method(#getOrdersInTimeRange, [
                      startTime,
                      endTime,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>
  getOrderStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getOrderStatistics, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                  _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getOrderStatistics, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Order>>> watchOrders() =>
      (super.noSuchMethod(
            Invocation.method(#watchOrders, []),
            returnValue:
                _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Order>>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Order>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.Order>> watchOrder(
    _i7.UserId? orderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchOrder, [orderId]),
            returnValue: _i4.Stream<_i2.Either<_i5.Failure, _i6.Order>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, _i6.Order>>);
}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i11.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> createRecipe(
    _i12.Recipe? recipe,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createRecipe, [recipe]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#createRecipe, [recipe]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> getRecipeById(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipeById, [recipeId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#getRecipeById, [recipeId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getAllRecipes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRecipes, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getAllRecipes, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getRecipesByCategory(
    _i12.RecipeCategory? category,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipesByCategory, [category]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getRecipesByCategory, [category]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getRecipesByDifficulty(
    _i12.RecipeDifficulty? difficulty,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipesByDifficulty, [difficulty]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getRecipesByDifficulty, [difficulty]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getActiveRecipes() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveRecipes, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getActiveRecipes, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>
  getRecipesByDietaryCategory(_i12.DietaryCategory? dietary) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipesByDietaryCategory, [dietary]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getRecipesByDietaryCategory, [dietary]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> searchRecipesByName(
    String? name,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchRecipesByName, [name]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#searchRecipesByName, [name]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>
  searchRecipesByIngredient(String? ingredient) =>
      (super.noSuchMethod(
            Invocation.method(#searchRecipesByIngredient, [ingredient]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#searchRecipesByIngredient, [ingredient]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getRecipesByPriceRange(
    _i13.Money? minPrice,
    _i13.Money? maxPrice,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipesByPriceRange, [minPrice, maxPrice]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getRecipesByPriceRange, [
                      minPrice,
                      maxPrice,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>
  getRecipesByPreparationTime(int? maxMinutes) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipesByPreparationTime, [maxMinutes]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getRecipesByPreparationTime, [
                      maxMinutes,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>> getPopularRecipes() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularRecipes, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i12.Recipe>>(
                    this,
                    Invocation.method(#getPopularRecipes, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> updateRecipe(
    _i12.Recipe? recipe,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateRecipe, [recipe]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#updateRecipe, [recipe]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> updateRecipePrice(
    _i7.UserId? recipeId,
    _i13.Money? price,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateRecipePrice, [recipeId, price]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#updateRecipePrice, [recipeId, price]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> updateRecipeTimes(
    _i7.UserId? recipeId,
    int? preparationTime,
    int? cookingTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateRecipeTimes, [
              recipeId,
              preparationTime,
              cookingTime,
            ]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#updateRecipeTimes, [
                  recipeId,
                  preparationTime,
                  cookingTime,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> activateRecipe(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#activateRecipe, [recipeId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#activateRecipe, [recipeId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>> deactivateRecipe(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deactivateRecipe, [recipeId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>.value(
              _FakeEither_0<_i5.Failure, _i12.Recipe>(
                this,
                Invocation.method(#deactivateRecipe, [recipeId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.Recipe>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>> getRecipeStatistics(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRecipeStatistics, [recipeId]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                  _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getRecipeStatistics, [recipeId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>
  getIngredientsInventory() =>
      (super.noSuchMethod(
            Invocation.method(#getIngredientsInventory, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                  _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getIngredientsInventory, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteRecipe(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecipe, [recipeId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#deleteRecipe, [recipeId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i12.Recipe>>> watchRecipes() =>
      (super.noSuchMethod(
            Invocation.method(#watchRecipes, []),
            returnValue:
                _i4.Stream<_i2.Either<_i5.Failure, List<_i12.Recipe>>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, List<_i12.Recipe>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i12.Recipe>> watchRecipe(
    _i7.UserId? recipeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchRecipe, [recipeId]),
            returnValue:
                _i4.Stream<_i2.Either<_i5.Failure, _i12.Recipe>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, _i12.Recipe>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i14.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> createUser(_i15.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#createUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> getUserById(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#getUserById, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> getUserByEmail(
    String? email,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByEmail, [email]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#getUserByEmail, [email]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>> getAllUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUsers, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i15.User>>(
                    this,
                    Invocation.method(#getAllUsers, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>> getUsersByRole(
    _i15.UserRole? role,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUsersByRole, [role]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i15.User>>(
                    this,
                    Invocation.method(#getUsersByRole, [role]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>> getActiveUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveUsers, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i15.User>>(
                    this,
                    Invocation.method(#getActiveUsers, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i15.User>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> updateUser(_i15.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [user]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#updateUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> authenticateUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateUser, [email, password]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#authenticateUser, [email, password]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> logoutUser(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logoutUser, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#logoutUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> updateUserRole(
    _i7.UserId? userId,
    _i15.UserRole? role,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserRole, [userId, role]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#updateUserRole, [userId, role]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> activateUser(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#activateUser, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#activateUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> deactivateUser(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deactivateUser, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#deactivateUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> hasPermission(
    _i7.UserId? userId,
    _i15.Permission? permission,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasPermission, [userId, permission]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#hasPermission, [userId, permission]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i15.Permission>>> getUserPermissions(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserPermissions, [userId]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i15.Permission>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i15.Permission>>(
                    this,
                    Invocation.method(#getUserPermissions, [userId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i15.Permission>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i15.User>> updateUserSession(
    _i7.UserId? userId,
    String? sessionId,
    _i16.Time? loginTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserSession, [
              userId,
              sessionId,
              loginTime,
            ]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i15.User>>.value(
              _FakeEither_0<_i5.Failure, _i15.User>(
                this,
                Invocation.method(#updateUserSession, [
                  userId,
                  sessionId,
                  loginTime,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i15.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isSessionValid(
    _i7.UserId? userId,
    String? sessionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isSessionValid, [userId, sessionId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#isSessionValid, [userId, sessionId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteUser(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#deleteUser, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i15.User>>> watchUsers() =>
      (super.noSuchMethod(
            Invocation.method(#watchUsers, []),
            returnValue:
                _i4.Stream<_i2.Either<_i5.Failure, List<_i15.User>>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, List<_i15.User>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i15.User>> watchUser(
    _i7.UserId? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchUser, [userId]),
            returnValue: _i4.Stream<_i2.Either<_i5.Failure, _i15.User>>.empty(),
          )
          as _i4.Stream<_i2.Either<_i5.Failure, _i15.User>>);
}

/// A class which mocks [WorkflowValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkflowValidationService extends _i1.Mock
    implements _i17.WorkflowValidationService {
  MockWorkflowValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool validateOrderStatusTransition({
    required _i6.Order? order,
    required _i8.OrderStatus? newStatus,
    required _i15.User? requestingUser,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateOrderStatusTransition, [], {
              #order: order,
              #newStatus: newStatus,
              #requestingUser: requestingUser,
            }),
            returnValue: false,
          )
          as bool);

  @override
  bool validateKitchenCapacity({
    required List<_i6.Order>? currentOrders,
    required List<_i15.User>? availableStaff,
    required int? maxConcurrentOrders,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateKitchenCapacity, [], {
              #currentOrders: currentOrders,
              #availableStaff: availableStaff,
              #maxConcurrentOrders: maxConcurrentOrders,
            }),
            returnValue: false,
          )
          as bool);

  @override
  bool validateSpecialHandlingRequirements({
    required _i6.Order? order,
    required _i15.User? assignedChef,
    required List<String>? availableEquipment,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateSpecialHandlingRequirements, [], {
              #order: order,
              #assignedChef: assignedChef,
              #availableEquipment: availableEquipment,
            }),
            returnValue: false,
          )
          as bool);

  @override
  bool validateAnalyticsIntegrity({
    required _i18.KitchenMetric? metric,
    required List<_i6.Order>? relatedOrders,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateAnalyticsIntegrity, [], {
              #metric: metric,
              #relatedOrders: relatedOrders,
            }),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [KitchenConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockKitchenConfig extends _i1.Mock implements _i19.KitchenConfig {
  MockKitchenConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxConcurrentOrdersLimit =>
      (super.noSuchMethod(
            Invocation.getter(#maxConcurrentOrdersLimit),
            returnValue: 0,
          )
          as int);

  @override
  int get maxPreparationTime =>
      (super.noSuchMethod(
            Invocation.getter(#maxPreparationTime),
            returnValue: 0,
          )
          as int);

  @override
  int get minimumStaff =>
      (super.noSuchMethod(Invocation.getter(#minimumStaff), returnValue: 0)
          as int);

  @override
  bool isApproachingCapacity(int? currentOrders) =>
      (super.noSuchMethod(
            Invocation.method(#isApproachingCapacity, [currentOrders]),
            returnValue: false,
          )
          as bool);

  @override
  bool isAtCriticalCapacity(int? currentOrders) =>
      (super.noSuchMethod(
            Invocation.method(#isAtCriticalCapacity, [currentOrders]),
            returnValue: false,
          )
          as bool);

  @override
  String getCapacityRecommendation(int? currentOrders, int? availableStaff) =>
      (super.noSuchMethod(
            Invocation.method(#getCapacityRecommendation, [
              currentOrders,
              availableStaff,
            ]),
            returnValue: _i20.dummyValue<String>(
              this,
              Invocation.method(#getCapacityRecommendation, [
                currentOrders,
                availableStaff,
              ]),
            ),
          )
          as String);
}
