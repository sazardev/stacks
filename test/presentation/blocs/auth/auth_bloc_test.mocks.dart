// Mocks generated by Mockito 5.4.6 from annotations
// in stacks/test/presentation/blocs/auth/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacks/application/dtos/user_dtos.dart' as _i7;
import 'package:stacks/application/use_cases/user/authenticate_user_use_case.dart'
    as _i3;
import 'package:stacks/application/use_cases/user/user_use_cases.dart' as _i8;
import 'package:stacks/domain/entities/user.dart' as _i6;
import 'package:stacks/domain/failures/failures.dart' as _i5;
import 'package:stacks/domain/value_objects/user_id.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthenticateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticateUserUseCase extends _i1.Mock
    implements _i3.AuthenticateUserUseCase {
  MockAuthenticateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> execute(
    _i7.AuthenticateUserDto? dto,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [dto]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#execute, [dto]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [RegisterUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUserUseCase extends _i1.Mock
    implements _i3.RegisterUserUseCase {
  MockRegisterUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> execute(
    _i7.RegisterUserDto? dto,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [dto]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#execute, [dto]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [LogoutUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUserUseCase extends _i1.Mock implements _i8.LogoutUserUseCase {
  MockLogoutUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> call(_i9.UserId? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#call, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [UpdateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserUseCase extends _i1.Mock implements _i8.UpdateUserUseCase {
  MockUpdateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> call(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#call, [user]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#call, [user]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [IsSessionValidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsSessionValidUseCase extends _i1.Mock
    implements _i8.IsSessionValidUseCase {
  MockIsSessionValidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call(
    _i9.UserId? userId,
    String? sessionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, sessionId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#call, [userId, sessionId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
